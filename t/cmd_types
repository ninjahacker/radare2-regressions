#!/bin/sh

# GPL 3+ - Copyright (C) 2011-2012  pancake, Edd Barrett, Simon Ruderich

[ -e tests.sh ] && . ./tests.sh || . ../tests.sh

NAME='te'
BROKEN=
FILE=-
CMDS='
"td enum pe_machine { IMAGE_FILE_MACHINE_IA64=0x200, IMAGE_FILE_MACHINE_I386=0x14c };"
te pe_machine 0x14c
'
EXPECT='IMAGE_FILE_MACHINE_I386
'
run_test

NAME='tb'
BROKEN=1
FILE=-
CMDS='
"td enum pe_machine { IMAGE_FILE_MACHINE_IA64=0x200, IMAGE_FILE_MACHINE_I386=0x14c };"
tb pe_machine IMAGE_FILE_MACHINE_I386
'
EXPECT='0x14c
'
run_test

NAME='t-*'
BROKEN=1
FILE=-
CMDS='"td enum pe_machine { IMAGE_FILE_MACHINE_IA64=0x200, IMAGE_FILE_MACHINE_I386=0x14c };"
t-*
t
'
EXPECT=''
run_test

NAME='t-name'
BROKEN=1
FILE=-
CMDS='"td enum pe_machine { IMAGE_FILE_MACHINE_IA64=0x200, IMAGE_FILE_MACHINE_I386=0x14c };"
t-pe_machine
t~?pe_machine
'
EXPECT='0
'
run_test

NAME='t pf'
BROKEN=1
FILE=-
CMDS='t uint16_t
'
EXPECT='w
'
run_test

NAME='struct'
BROKEN=
FILE=-
CMDS='
"td struct a{int a;int b;};"
t~?
'
EXPECT='30
'
run_test

NAME='enum32'
BROKEN=
FILE=-
CMDS='
"td enum v { t=0x123, p=0x321 };"
t~?
tk v
tk v.t
tk v.p
'
EXPECT='31
enum

0x123

0x321

'
run_test



NAME='enum64'
FILE=-
CMDS='
"td enum v { t=0x8000000000000001, p=0x8000000000000008 };"
t~?
tk v.t
tk v.p
'
EXPECT='31
0x8000000000000001

0x8000000000000008

'
run_test


NAME='to test.h'
FILE=-
CMDS='
to ../bins/other/test.h
t
t addr
'
EXPECT='unsigned int=type
unsigned char=type
unsigned short=type
int=type
long=type
void *=type
char=type
char *=type
const char*=type
uint8_t=type
uint16_t=type
uint32_t=type
uint64_t=type
type.unsigned int=i
type.unsigned char=b
type.unsigned short=w
type.int=d
type.long=x
type.void *=p
type.char=b
type.char *=*z
type.const char*=*z
type.uint8_t=b
type.uint16_t=w
type.uint32_t=d
type.uint64_t=q
name=struct
struct.name=first,middle,last
struct.name.first=char *,0,40
struct.name.middle=char *,40,40
struct.name.last=char *,80,40
date=struct
struct.date=day,month,year
struct.date.day=unsigned char,0,0
struct.date.month=unsigned char,1,0
struct.date.year=unsigned short,2,0
addr=struct
struct.addr=street,city,zip
struct.addr.street=char *,0,127
struct.addr.city=char *,127,40
struct.addr.zip=unsigned int,168,0
dox=struct
struct.dox=address,name,bday
struct.dox.address=struct addr,0,0
struct.dox.name=struct name,172,0
struct.dox.bday=struct date,292,0
pf *z*zi street city zip 
'
run_test


NAME='tl, tf test on structure'
FILE=-
CMDS='"td typedef struct name { char name[10]; }"
s 100
w Carlos
s 0
wx 0x00000064
tl name @ 0x0
tf 0x0
'
EXPECT='struct name {
name : (*0x64) 0x00000000 = Carlos
}
'
run_test
