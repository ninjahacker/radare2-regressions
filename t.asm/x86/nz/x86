#!/bin/sh
for a in . .. ../.. ../../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh; done

export RASM2_NOPLUGINS=1
test_vector() {
NAME="x86.nz: [${1}]"
if [ "${3}" = "br" ]; then
	BROKEN=1
fi
CMDS='!rasm2 -a x86.nz -b '${BITS}' "'${1}'"
'
EXPECT="${2}
"
run_test
}

# NOTE:
# Some instructions are assembled correctly, but there is a more
# efficient (== less bytes) way to assemble them. These are marked with
# comments starting with "cbs:" (Same, But Shorter).
#
# Also, there are instructions that are technically not assembled correctly,
# but the generated bytecode does exactly the same. E.g. "xchg ebx,ecx" is 
# assembled as "87d9", which is "xchg ecx, ebx" - it's not the same, but does
# exactly the same. These instructions are accepted as correct, but marked with
# comments starting with "wbs" (Wrong, But Same).

BITS=32
test_vector "add [eax], eax" 0100
test_vector "add dword [eax+8], 1" 83400801
test_vector "add dword [eax], 1" 830001
test_vector "add dword [ebp+4], 1" 83450401
test_vector "add dword [ebp+8], 1" 83450801
test_vector "add dword [ebx+8], 1" 83430801
test_vector "add dword [ebx], 1" 830301
test_vector "add dword [esp+8], 1" 8344240801
test_vector "add eax, 1" 83c001
test_vector "add eax, 3" 83c003
test_vector "add esi,-334" 81c6b2feffff
test_vector "call 0x8049100" e8fb900408
test_vector "call ebx" ffd3
test_vector "cmp eax, 33" 83f821
test_vector "cmp eax, ebx" 39d8
test_vector "cmp ebx, eax" 39c3
test_vector "cmp edx, esi" 39f2
test_vector "dec eax" 48
test_vector "dec esi" 4e
test_vector "inc eax" 40
test_vector "inc edx" 42
test_vector "inc esi" 46
test_vector "int 0x21" cd21
test_vector "int3" cc
test_vector "ja 0x8049300" 0f87fa920408
test_vector "jb 0x8049300" 0f82fa920408
test_vector "jg 0x8049300" 0f8ffa920408
test_vector "jge 0x8048010" 0f8d0a800408
test_vector "jge 0x8049300" 0f8dfa920408
test_vector "jl 0x8048010" 0f8c0a800408
test_vector "jl 0x8049300" 0f8cfa920408
test_vector "jle 0x8048010" 0f8e0a800408
test_vector "jle 0x8049300" 0f8efa920408
test_vector "jmp 0x8049200" e9fb910408
test_vector "jmp 2" eb00
test_vector "jmp 0" ebfe
test_vector "jmp 0x42" eb40
test_vector "jmp 0x81" eb7f
test_vector "jmp -0x7e" eb80
test_vector "jmp 0x82" e97d000000
test_vector "jmp -0x7f" e97cffffff
test_vector "jmp ecx" ffe1
test_vector "lea eax, [4]" 8d0504000000
test_vector "lea eax, [eax+4]" 8d4004
test_vector "lea eax, [eax]" 8d00
test_vector "lea eax, [ebp+24]" 8d4518
test_vector "lea eax, [ebx+24]" 8d4318
test_vector "lea eax, [ebx+4]" 8d4304
test_vector "lea eax, [ecx]" 8d01
test_vector "lea eax, [esp]" 8d0424
test_vector "lea ebx, [4]" 8d1d04000000
test_vector "lea ebx, [eax+24]" 8d5818
test_vector "lea ebx, [eax+4]" 8d5804
test_vector "lea ebx, [ebp+324]" 8d9d44010000
test_vector "lea ebx, [ebp]" 8d5d00
test_vector "mov [33], ebp" 892d21000000
test_vector "mov [33], ebx" 891d21000000
test_vector "mov [33], ecx" 890d21000000
test_vector "mov [33], edi" 893d21000000
test_vector "mov [33], edx" 891521000000
test_vector "mov [33], esi" 893521000000
test_vector "mov [33], esp" 892521000000
test_vector "mov [eax+2], ebx" 895802
test_vector "mov [eax+4], eax" 894004
test_vector "mov [eax+4], ecx" 894804
test_vector "mov [eax+eax], eax" 890400
test_vector "mov [eax+eax], ebx" 891c00
test_vector "mov [eax+eax], ecx" 890c00
test_vector "mov [eax+ecx], eax" 890408
test_vector "mov [eax], eax" 8900
test_vector "mov [eax], ebx" 8918
test_vector "mov [ebp+4], eax" 894504
test_vector "mov [ebp+4], ebx" 895d04
test_vector "mov [ebp+4], ecx" 894d04
test_vector "mov [ebx+2], ebx" 895b02
test_vector "mov [ebx+eax], eax" 890403
test_vector "mov [ebx], eax" 8903
test_vector "mov dword [eax+16], 0x6f77206f" c780100000006f20776f # sbs: c740106f20776f
test_vector "mov dword [eax+450], 0x6f77206f" c780c20100006f20776f
test_vector "mov dword [eax+4], 1" c7800400000001000000 # sbs: c7400401000000
test_vector "mov dword [eax+4], 3" c7800400000003000000 # sbs: c7400403000000
test_vector "mov dword [eax+4], 666" c780040000009a020000 # sbs: c740049a020000
test_vector "mov dword [eax], 0x6f77206f" c7006f20776f
test_vector "mov dword [eax], 3" c70003000000
test_vector "mov dword [eax], 666" c7009a020000
test_vector "mov dword [ebp+16], 0x6f77206f" c785100000006f20776f # c745106f20776f
test_vector "mov dword [ebp+450], 0x6f77206f" c785c20100006f20776f
test_vector "mov dword [ebp+4], 1" c7850400000001000000 # sbs: c7450401000000
test_vector "mov dword [ebp-12], 1" c785f4ffffff01000000 # sbs: c745f401000000
test_vector "mov dword [esi+4], 33" c7860400000021000000 # sbs: c7460421000000
test_vector "mov dword [esp+4], 1" c784240400000001000000 # sbs: c744240401000000
test_vector "mov dword [esp], 3" c7042403000000
test_vector "mov eax, 0x8049000" b800900408
test_vector "mov eax, 1" b801000000
test_vector "mov eax, 3" b803000000
test_vector "mov eax, [eax+4]" 8b4004
test_vector "mov eax, [eax+1337]" 8b8039050000 "br"
test_vector "mov eax, [eax]" 8b00
test_vector "mov eax, [ebp]" 8b4500
test_vector "mov eax, [ebx]" 8b03
test_vector "mov eax, [esi]" 8b06
test_vector "mov eax, [esp+4]" 8b442404
test_vector "mov eax, [esp]" 8b0424
test_vector "mov eax, eax" 89c0
test_vector "mov eax, ebx" 89d8
test_vector "mov eax, esp" 89e0
test_vector "mov eax,[eax*4+32]" 8b048520000000 "br"
test_vector "mov eax,[eax+ebx*4+32]" 8b449820 "br"
test_vector "mov ebx, 1" bb01000000
test_vector "mov ebx, [eax]" 8b18
test_vector "mov ebx, eax" 89c3
test_vector "mov ecx, 1" b901000000
test_vector "pop ds" 1f
test_vector "pop dword [eax+4]" 8f4004
test_vector "pop dword [eax]" 8f00
test_vector "pop dword [ebp+4]" 8f4504
test_vector "pop dword [ebp]" 8f4500
test_vector "pop dword [ecx]" 8f01
test_vector "pop dword [edi]" 8f07
test_vector "pop dword [esi]" 8f06
test_vector "pop dword [esp]" 8f0424
test_vector "pop fs" 0fa1
test_vector "pop gs" 0fa9
test_vector "push cs" 0e
test_vector "push ds" 1e
test_vector "push dword [eax+8]" ff7008
test_vector "push dword [eax]" ff30
test_vector "push dword [ebp+4]" ff7504
test_vector "push dword [ebp]" ff7500
test_vector "push dword [ebx+4]" ff7304
test_vector "push dword [ecx]" ff31
test_vector "push dword [edi]" ff37
test_vector "push dword [esi+4]" ff7604
test_vector "push dword [esi]" ff36
test_vector "push dword [esp+4]" ff742404
test_vector "push dword [esp]" ff3424
test_vector "push fs" 0fa0
test_vector "ret" c3
test_vector "shl edx, 5" c1f205 # wbs (correct: c1e205)
test_vector "sub [ebx], eax" 2903
test_vector "sub dword [eax+4], 666" 8168049a020000 "br"
test_vector "sub dword [eax], 1" 832801
test_vector "sub dword [eax], 666" 81289a020000
test_vector "sub dword [ebp+4], 1" 836d0401
test_vector "sub dword [ebx], 1" 832b01
test_vector "sub eax, 3" 83e803
test_vector "sub eax, 666" 2d9a020000
test_vector "sub eax, eax" 29c0
test_vector "sub eax, ebx" 29d8
test_vector "sub ebx, -3" 83ebfd
test_vector "sub ebx, 3" 83eb03
test_vector "sub ebx, 666" 81eb9a020000
test_vector "sub ebx, eax" 29c3
test_vector "sub ecx, 666" 81e99a020000
test_vector "sub esi,-334" 81eeb2feffff
test_vector "syscall" 0f05
test_vector "test eax, ebx" 85d8
test_vector "test edx, esi" 85f2
test_vector "xchg eax,eax" 90
test_vector "xchg eax,ebx" 87d8 # sbs: 93
test_vector "xchg eax,esp" 87e0 # sbs: 94
test_vector "xchg ebx,ecx" 87cb
test_vector "xchg ecx,ebx" 87d9
test_vector "xchg ecx,ebp" 87e9
test_vector "xchg ecx,ecx" 90 # wbs (correct: 87c9)
test_vector "xor [eax], eax" 3100
test_vector "xor eax,eax" 31c0
test_vector "xor eax,ebx" 31d8
test_vector "xor ebx,eax" 31c3
test_vector "xor esi,ebp" 31ee
test_vector "xor esp,esp" 31e4

BITS=64
test_vector "shl rdx, 5" 48c1f205 # wbs (correct: 48c1e205)
test_vector "xor rdx, rdx" 4831d2
test_vector "inc rdx" 48ffc2
test_vector "test rcx, rcx" 4885c9
test_vector "mov rax, 3" 48c7c003000000 # sbs: b803000000
test_vector "mov rbx, 3" 48c7c303000000 # sbs: bb03000000
test_vector "mov rbx, rax" 4889c3
test_vector "mov rsi, rbx" 4889de
test_vector "mov [rsi], rbx" 48891e
test_vector "mov edx, [rbp-4]" 8b55fc
test_vector "xor rax, rax" 4831c0
test_vector "xor [rax], rax" 483100
test_vector "xor [rsi], rbx" 48311e
test_vector "call rbx" ffd3
test_vector "jmp rbx" ffe3
test_vector "pop rax" 58
test_vector "mov rax, 33" 48c7c021000000 # sbs: b821000000
test_vector "add rax, rcx" 4801c8
test_vector "add rax, 44" 4883c02c
test_vector "sub rax, rbx" 4829d8
test_vector "sub rax, 44" 4883e82c
test_vector "cmp rax, rbx" 4839d8
test_vector "cmp rax, 33" 4883f821
test_vector "cmp rbx, rax" 4839c3
test_vector "cmp rdx, rsi" 4839f2
test_vector "test rdx, rsi" 4885f2
test_vector "test rax, rbx" 4885d8

